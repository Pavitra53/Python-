{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22389978-6aef-4246-ba94-dff373bca5a1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "bab23623-a1d4-44df-baa1-1562cbd57c84",
   "metadata": {},
   "source": [
    "#PYHON PROGRAMMING LANGUAGE"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45b16a84-1fbb-478e-b1a8-c6872a4eb6a1",
   "metadata": {},
   "source": [
    "Python Became the Best Programming Language&fastest programming language. Python is used in machine learning, Data Science, Big Data,Web Development, Scripting.We will learn from start to end||basic to expert .if you are not done program then that is totally fine.Iwill explain from starting from scratch.python software _pycharm||va code||jupyter||spyder"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c2e6b73-4f72-4fd9-9366-04df060b1a64",
   "metadata": {},
   "source": [
    "#PYTHON INTERPRETTER \n",
    "IDE(INTEGRATED DEVELOPMENT ENVIRONMENT)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d7a25f3-3fb2-422b-98f4-6a658edcb50f",
   "metadata": {},
   "source": [
    "PYTHON INTERPRETER -->\n",
    "What is Python interpreter?\n",
    "A python interpreter is a computer program that converts each high-level program statement into machine code. An interpreter translates the command that you write out into code that the computer can understand\n",
    "\n",
    "PYTHON INTERPRETER EXAMPLE --> \n",
    "You write your Python code in a text file with a name like hello.py . How does that code Run? There is program installed on your computer named \"python3\" or \"python\", and its job is looking at and running your Python code. This type of program is called an \"interpreter\"."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9812b6c4-69a0-46a9-8b73-7fd99483e22c",
   "metadata": {},
   "source": [
    "IDE (INTEGRATED DEVELOPMENT ENVIRONMENT) =>\n",
    "- using IDE - one can write code, run the code, debug the code\n",
    "- IDE takes care of interpreting the Python code, running python scripts, building executables, and debugging the applications.\n",
    "- An IDE enables programmers to combine the different aspects of writing a computer program. \n",
    "- if you wnated to be python developer only then you need to install (IDE -- PYCHARM)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b03765ce-b8c4-4d59-8000-582b245c6ddc",
   "metadata": {},
   "source": [
    "#PYTHON INTERPRETER& COMPILER"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aec9b107-c1f0-49db-a4c6-cf628b78b0b0",
   "metadata": {},
   "source": [
    "Both compilers and interpreters are used to convert a program written in a high-level language into machine code understood by computers.\r\n",
    "Interpreter -->\r\n",
    "- Translates program one statement at a time\r\n",
    "- Interpreter run every line item \r\n",
    "- Execut the single, partial line of code\r\n",
    "- Easy for programming \r\n",
    "\r\n",
    "Compiler -->\r\n",
    "- Scans the entire program and translates it as a whole into machine code.\r\n",
    "- No execution if an error occurs\r\n",
    "- you can not fix the bug (debug) line by line "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "293b14b6-c898-432e-8808-f4268bab994c",
   "metadata": {},
   "source": [
    "Is Python an interpreter or compiler?\n",
    "Python is an interpreted language, which means the source code of a Python program is converted into bytecode that is then executed by the Python virtual machine. Python is different from major compiled languages, such as C and C + +, as Python code is not required to be built and linked like code for these languages."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0aa82f8-ebf0-44b5-b7b0-6d7b2be0dd36",
   "metadata": {},
   "source": [
    "#How to create python environment variable \n",
    "1- cmd - python ( if it not works)\n",
    "2- find the location where the python is installed -- >\n",
    "         C:\\Users\\kdata\\AppData\\Local\\Programs\\Python\\Python311\\Scripts \n",
    "3- system -- env - environment variable screen will pop up \n",
    "4- select on system variable - click on path - create New \n",
    "5- C:\\Users\\kdata\\AppData\\Local\\Programs\\Python\\Python311\n",
    "6- env - sys variable - path - new - C:\\Users\\kdata\\AppData\\Local\\Programs\\Python\\Python311\\Scripts\n",
    "7- cmd - type python -version\n",
    "8- successfully python install in cmd      \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7a4566a-acb1-4015-964b-372e5ccc8618",
   "metadata": {},
   "source": [
    "#ANACONDA"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9524c26-b396-4ec9-93a6-bd8551f23544",
   "metadata": {},
   "source": [
    "Anaconda is a distribution of the Python and R programming languages for scientific computing (data science, machine learning applications, large-scale data processing, predictive analytics, etc.), that aims to simplify package management and deployment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2f6bfb2a-efa2-4f81-8f1b-44028d50b51d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1+1# ADDITION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e8e32826-2acb-4ee8-92c1-df177677fdb2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2-1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2a74af95-bf15-4fef-b0b7-9069bf7894f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "3*4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a56f5c47-8af0-43f1-8688-65ad90187a15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "8/4 # Division"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e49a2f14-9b51-43b2-a8b4-20c14b557ce1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.6"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "8/5 # float division"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "312e25ad-076d-41f4-9742-3765ca458a4e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "8/4## float divison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "18d8ad65-0099-4893-8093-602282d1604a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "8//4#integer division"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2cd76a94-0867-4ec1-b725-00b8656a0f18",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "8+9-7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "72bd1f88-f8f0-446f-8e59-5de106a3aeae",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (2140494797.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[11], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    8+8 -#syntax error:\u001b[0m\n\u001b[1;37m         ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "8+8 -#syntax error:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8a10d43b-2408-4e80-83d1-8aca76539343",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(5+5)*5 #BODMAS (Bracket || orders || Divide||Multiply ||Add ||Substact)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "527e2d7b-513b-45f4-b088-eea032743910",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "5+5*5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d7c5ac2c-1dce-4ae4-9c99-9171cd525546",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2*2*2*2*2 #exponentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6db9ecd7-6a6c-46bf-b8ed-a197c7cb7806",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2**5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a5ced887-4444-4dbf-8a82-eb4aca3c3206",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.0"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "15/3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "acde0ea0-c732-411a-9334-0f5395173dea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "10//3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2d9a2da9-dca4-4952-8c2c-90ff3b4849ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "14 % 2 # Modulus"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5d1745b0-725d-41c0-b143-3e98474d8a00",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (1768330815.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[21], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    15 %% 2\u001b[0m\n\u001b[1;37m        ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "15 %% 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ca5489ce-c4c2-4f7a-b3dd-741114c5afb0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n",
      "7.8\n",
      "nit\n",
      "(8+9j)\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "a,b,c,d,e = 15, 7.8, 'nit', 8+9j, True\n",
    "\n",
    "print(a)\n",
    "print(b)\n",
    "print(c)\n",
    "print(d)\n",
    "print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6c782141-44a2-4b3d-a50e-ffb2bc3e1185",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n",
      "<class 'float'>\n",
      "<class 'str'>\n",
      "<class 'complex'>\n",
      "<class 'complex'>\n",
      "<class 'bool'>\n"
     ]
    }
   ],
   "source": [
    "print(type(a))\n",
    "print(type(b))\n",
    "print(type(c))\n",
    "print(type(d))\n",
    "print(type(d))\n",
    "print(type(e))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "47e42f32-1a34-40b8-bca8-b4dcf54c0e36",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(c)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be078360-0d0d-4bfa-8aea-32e89a35e5b7",
   "metadata": {},
   "source": [
    "# SO Far we code with numbers(integer)\n",
    " . lets work with string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "dc9d976a-a5b6-4248-858c-317de1833a27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Naresh IT'"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'Naresh IT'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15785a43-49ea-4aa4-93f6-0ade35f9dfc3",
   "metadata": {},
   "source": [
    "python inbuild function -print & you need to pass the parameter in print()\n",
    "A function is a block of code which only runs when it is called. you can pass data, known as parameters , into a function . A function can return data as a result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "630ca576-2d06-4c06-ad09-a625f78d955e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "naresh it\n"
     ]
    }
   ],
   "source": [
    "print('naresh it')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "62b81ec2-6d70-4b81-a9fe-d7ddb9b45935",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "' max it technology'"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\" max it technology\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "99e04988-7b75-4fca-bb02-13ec5c85e03e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'naresh it technology'"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1 ='naresh it technology'\n",
    "s1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "a75fe883-931c-4814-b7db-30e53720bfc5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=2\n",
    "b=3\n",
    "\n",
    "a+b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "686f5c1a-dc34-4642-b945-261f31f8bdb1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c=a+b\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f68cdfa8-d224-4125-815d-6ed3c33ae0ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a= 3\n",
    "b ='hi'\n",
    "type(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "9cf33009-b9ec-4402-ba68-3ae4f68c7760",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unsupported operand type(s) for +: 'int' and 'str'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[35], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m a\u001b[38;5;241m+\u001b[39mb\n",
      "\u001b[1;31mTypeError\u001b[0m: unsupported operand type(s) for +: 'int' and 'str'"
     ]
    }
   ],
   "source": [
    "a+b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "c70f909e-7b8c-48aa-a9a6-3b15793b95c5",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax. Perhaps you forgot a comma? (3525729664.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[36], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    print('naresh it's 'Technology')\u001b[0m\n\u001b[1;37m          ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax. Perhaps you forgot a comma?\n"
     ]
    }
   ],
   "source": [
    "print('naresh it's 'Technology')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "62ce37b0-aa92-4c0b-8f1b-77d854ffc096",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "naresh it's \"Technology\" \n"
     ]
    }
   ],
   "source": [
    "print('naresh it\\'s \"Technology\" ')# \\has some special meaning to ignore the error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a63dcb7e-864a-4972-91bb-7ad92b255a03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "naresh it Technology\n"
     ]
    }
   ],
   "source": [
    "print('naresh it' , 'Technology')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "911803aa-b001-4870-a765-b1c7666b3edd",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unterminated string literal (detected at line 1) (508334202.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[39], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    print('naresh it ', 'Technology\")\u001b[0m\n\u001b[1;37m                        ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m unterminated string literal (detected at line 1)\n"
     ]
    }
   ],
   "source": [
    "print('naresh it ', 'Technology\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "371ec174-1660-4596-9f9f-8ca6cfc99cdc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'nitnit'"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#print the nit 2 times\n",
    "'nit'+ 'nit'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "6a0a36f7-b216-4635-99ba-60e65ca24d19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'nitnit'"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'nit'  'nit'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "e6b475b3-1fcb-4a08-a70a-16cb335d360e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'nitnitnitnitnit'"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#5 time print\n",
    "5* 'nit'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "0364c5bb-f513-4384-bd49-2883fde1501d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "' nit  nit  nit  nit  nit '"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "5* ' nit ' # space between words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "27d980cb-e7c7-4bbe-b2f7-d15ab22572ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "c:\n",
      "it\n"
     ]
    }
   ],
   "source": [
    "print ('c:\\nit') #\\n --new line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "68601db1-aa70-4f09-be17-da80207f02ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "c:\\nit\n"
     ]
    }
   ],
   "source": [
    "print (r'c:\\nit')# raw string"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a44fb5a3-be0f-42f9-b58b-1e14743e5ec2",
   "metadata": {},
   "source": [
    "# Variable|| identifier|| object"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e59cdec4-c823-4066-bde6-d2010dd4d4fb",
   "metadata": {},
   "source": [
    "# value = 2\n",
    " # variable name = x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "143fd6d5-9040-4358-a657-42aa622cb8d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "1d390cb1-4c5a-491a-81f5-ecf40ccd89d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x =2 #x is variable /idntifier /object , 2is the value\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "3a9cc1c8-2e34-4849-a09d-273cab22aa57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x+3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "6c2fc66a-0014-434b-94df-5ffb56bfd9b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y=3\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "2eabeca2-8881-49a1-95e5-d938d064d476",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x+y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "ee8608ed-51a5-4617-89d4-c693f6b3a540",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=9\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "d4b329dd-a91f-4d3d-9f6f-e76c4745142b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x+y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "e5d30a4f-1684-42a3-a9e7-48aad9c3e114",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "19"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x+10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "90bd213a-adb6-430b-bc36-cc942cdfba1d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "80065a99-0276-4795-9a8d-ae8663c050a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "_+y  #_ understand the previous result of the y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "9cbde4bb-ce5d-4ace-bf08-481196b48f20",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "ff1050a7-9331-465b-960f-7f8911384ac2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "_+y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "1995f19a-c7a2-427b-855e-3d046c74a760",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "_+y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "9eac799e-4bda-4d0c-96f0-18f18c321bec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "_+y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "6bd21dd4-e7b9-478d-b7cc-1ff164428933",
   "metadata": {},
   "outputs": [],
   "source": [
    "# string variable\n",
    "name = 'mit'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "2db0e5fd-d9d5-4a1a-9e74-dd39098979ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'mit'"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "ffe5e1db-dd92-4c14-87e2-b2077893f3f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'mit technology'"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name + ' technology'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "0b49c1d9-6bb0-4b20-b7a5-88055c8cba93",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (3186014715.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[69], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    name 'technology'\u001b[0m\n\u001b[1;37m         ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "name 'technology'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "09db54fc-d1db-4df8-b6d5-29be9e81ccb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'mit'"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "bb299f48-d96b-4c1d-9921-b6138baa19c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "486b6264-b265-448d-b64e-3ec0c01499fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'m'"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name[0] #python index begins with 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "969f5b79-6aea-466d-bc6c-dcef3343914b",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "string index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[73], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m name [\u001b[38;5;241m5\u001b[39m]\n",
      "\u001b[1;31mIndexError\u001b[0m: string index out of range"
     ]
    }
   ],
   "source": [
    "name [5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "9204d585-65be-4a13-bf1e-9f229f9d2f87",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "string index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[74], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m name[\u001b[38;5;241m7\u001b[39m]\n",
      "\u001b[1;31mIndexError\u001b[0m: string index out of range"
     ]
    }
   ],
   "source": [
    "name[7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "b63b30ba-b485-4adf-a32d-2977ef790d98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'t'"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "0c2c65a6-972f-405e-93fc-933ff88b86d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'i'"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name[-2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "4bbbdd97-8319-482d-801e-b6fed35ceaa0",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "string index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[77], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m name[\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m6\u001b[39m]\n",
      "\u001b[1;31mIndexError\u001b[0m: string index out of range"
     ]
    }
   ],
   "source": [
    "name[-6]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "934f9bb3-3bcb-4255-a976-519b5995b92f",
   "metadata": {},
   "source": [
    "# slicing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "d9415ac6-de74-4048-8736-f0f3cea380eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'mit'"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f34d2bb-62c4-45ee-8796-f4ab9d366333",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "d2ef8d60-7dcf-4d42-82d5-97bd447c5497",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'m'"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name [0:1] #to print 2 character"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "56a2c8df-5b41-4c41-a9c8-95601b753c28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'mi'"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name[0:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "8cafa335-5059-46d2-942a-2e9132577aef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'it'"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name[1:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "53fbad22-8410-47bf-abac-f52d4124ef75",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'mit'"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "96b166a8-0b1e-4df5-95d6-a29c14e40ab0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'it'"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name[1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "0cdc9003-8cf7-4a1d-b81b-51b154be05ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'mit'"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name[:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "7adebc26-549f-4210-b0cb-c4b2d220667f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "''"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name[3:9]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "721fef58-c755-416b-a58e-1f1dc222c48f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'fine'"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name1= 'fine'\n",
    "name1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ff2c565-e13b-456d-bdd2-bb604ec3fa59",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "e6647c3f-3499-448e-8438-ea50d3b26d19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'f'"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name1[0:1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "6f49652e-f79a-494a-88dc-237c9644a0e2",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'str' object does not support item assignment",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[88], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m name1[\u001b[38;5;241m0\u001b[39m:\u001b[38;5;241m1\u001b[39m]\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124md\u001b[39m\u001b[38;5;124m'\u001b[39m\n",
      "\u001b[1;31mTypeError\u001b[0m: 'str' object does not support item assignment"
     ]
    }
   ],
   "source": [
    "name1[0:1]='d' # i want to change 1st charcter of naresh (n) -t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "cfb2f096-96e3-4324-8abe-0d79f491ff93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'fine'"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "127117d8-4d13-4730-95bf-09b4ad920e81",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'str' object does not support item assignment",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[90], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m name1[\u001b[38;5;241m0\u001b[39m] \u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124md\u001b[39m\u001b[38;5;124m'\u001b[39m\n",
      "\u001b[1;31mTypeError\u001b[0m: 'str' object does not support item assignment"
     ]
    }
   ],
   "source": [
    "name1[0] ='d' #strings in python are immutable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "8668ee94-3a41-4960-86ba-655582690ae1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'fine'"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "f0016adf-779e-4122-98f9-89ccca19b710",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'ine'"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name1[1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "689f252f-687a-41fc-bff9-151d6652f209",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'dine'"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'d'+name1[1:]# i want to change fine to dine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "c6dd7abf-0ba4-40fd-98cb-e0497e13716d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(name1) #python inbuild function"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9423e0a0-7575-4e43-8a85-db2ac98ab195",
   "metadata": {},
   "source": [
    "#  List"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "863ad11f-1094-4729-a3d4-8e634ab3491e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10, 20, 30]"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# LIST LIST LIST\n",
    "nums =[10,20,30]\n",
    "nums"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "625c1b39-9b0d-4984-9703-69352bc1f951",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nums[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "89f8262a-526a-44d8-b0b0-24419a5e540f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nums[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "8db6d770-59cf-4da5-bfc4-57f0d37843dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[20, 30]"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nums[1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "11ace4b4-c577-408b-9424-a7b689d066fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10]"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nums[:1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "eb6e635d-ce11-4150-b8d6-c023118b9696",
   "metadata": {},
   "outputs": [],
   "source": [
    "num1 =['hi','hello']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "31f050b2-e601-4a65-bf67-4e93b54165da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['hi', 'hello']"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "1cee5ce3-3d5f-437e-b147-64849bd34bc2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['hi', 8.9, 34]"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num2=['hi', 8.9,34] # we can assign multiple variables\n",
    "num2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "5e3f332d-1e58-4dcd-b9b4-a8b86fc18e81",
   "metadata": {},
   "outputs": [],
   "source": [
    "#can we have 2 list together\n",
    "num3 =[nums,num1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "8bcc3fd6-00d4-4af0-a613-da1c321dfcad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[10, 20, 30], ['hi', 'hello']]"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "6c3fecff-9ca5-4b7b-83b0-bcdf86f3906b",
   "metadata": {},
   "outputs": [],
   "source": [
    "num4 =[nums,num1,num2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "8087b774-ccb4-4781-b089-1d5e7f2764f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[10, 20, 30], ['hi', 'hello'], ['hi', 8.9, 34]]"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "ad506d1d-c932-4fd5-bcfd-015460ef7dad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10, 20, 30]"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nums"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "9844bfd5-aaef-4d0a-b376-53be71122ec9",
   "metadata": {},
   "outputs": [],
   "source": [
    "nums.append(45)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "8f20cc41-0311-45fa-8540-ad88f4ad34d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10, 20, 30, 45]"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nums"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "80c4cac7-b3ff-43e4-a73d-06d7b5883092",
   "metadata": {},
   "outputs": [],
   "source": [
    "nums.remove(45)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "ed8327ff-f843-4a85-969c-2a6a8cd58f5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10, 20, 30]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nums"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "3558f7e0-bdd4-42f7-beb0-55f745b919a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nums.pop(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "2a9e4fb0-b76b-4984-a3dc-8c217874d0ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10, 30]"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nums"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "4a0f5846-316b-4a71-a77e-6f9c10eb3f73",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nums.pop()# if you dont assign the index elements then it will consider by default last index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "e38048c6-cf7d-4253-9e6e-9b95e4039692",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10]"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nums"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "3eb93d84-9b30-4d57-a290-7a088d092671",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['hi', 'hello']"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "6ea1c8db-ff8a-4434-b0cf-d0f905ae4145",
   "metadata": {},
   "outputs": [],
   "source": [
    "num1.insert(2,'nit')# insert the value as per index value i.e 2nd index we are assigning nit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "3cb0477e-362a-4481-b3c6-6d9678f3568a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['hi', 'hello', 'nit']"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "ba8f2a2c-0471-4387-998b-d6dde922f24b",
   "metadata": {},
   "outputs": [],
   "source": [
    "num1.insert(0,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "5669960c-cfa7-4e18-907b-85f5c3fd0d23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 'hi', 'hello', 'nit']"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "10f06a6e-bddb-4c48-8ad6-4cee3d848fed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['hi', 8.9, 34]"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# if you want to delete multiple value\n",
    "num2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "7efcdb61-eae1-4ec3-97a4-a0bb7562bdfa",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'num' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[122], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mdel\u001b[39;00m num[\u001b[38;5;241m2\u001b[39m:]\n",
      "\u001b[1;31mNameError\u001b[0m: name 'num' is not defined"
     ]
    }
   ],
   "source": [
    "del num[2:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "806a483e-60c8-4a09-be00-dcc8bae10aa0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['hi', 8.9, 34]"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "6849a75d-4323-4ad8-b43a-c78e5b37ca90",
   "metadata": {},
   "outputs": [],
   "source": [
    "# if you need to add multiple values \n",
    "num2.extend([29,15,20])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "fe7aa811-bea7-4947-8b0c-aa1281a12cf3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['hi', 8.9, 34, 29, 15, 20]"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "2d2fe72a-58c7-4667-b29e-ca18d7815993",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[10], [1, 'hi', 'hello', 'nit']]"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "fb5e14a4-72af-402f-84b6-ae0f16a7e806",
   "metadata": {},
   "outputs": [],
   "source": [
    "num3.extend(['a',5,6.7])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "307512b5-1c20-4cfc-87a2-b1b5def47c12",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[10], [1, 'hi', 'hello', 'nit'], 'a', 5, 6.7]"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "2fc8eeef-49c6-45f1-aae5-c1f1c877039c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10]"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nums"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "bf178fcf-26f6-4a61-9414-9d68da804a82",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min(nums)#include function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "2ba47319-3f45-4f34-9fbf-36bfdd715b3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max(nums)#inbuild function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "b55cd4b7-e30d-4fc8-abc5-0cbe9a722a9e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 'hi', 'hello', 'nit']"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "5f77a556-dd75-46bb-82f4-0bed3af67d8c",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'<' not supported between instances of 'str' and 'int'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[134], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28mmin\u001b[39m(num1)\n",
      "\u001b[1;31mTypeError\u001b[0m: '<' not supported between instances of 'str' and 'int'"
     ]
    }
   ],
   "source": [
    "min(num1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "07b2b323-1a2b-4f2f-b8ad-ee787b629b7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(nums)#inbuild function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "6b9add24-d28e-4241-a40d-7b6bbcea9f7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "nums.sort()#sort method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "7cef7e3a-d934-4058-a861-c5d5e4b2f93a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[10]"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nums"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3be1d515-7d2b-4005-a165-26ca2332a9e7",
   "metadata": {},
   "source": [
    "# Tuple"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "403b5c1f-c74f-4026-9e98-f5414d130745",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(15, 25, 35)"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TUPLE TUPLE TUPLE\n",
    "tup =(15,25,35)\n",
    "tup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "d1ff42c9-8064-444e-8697-97f30d0ad981",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tup[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "cd5f9a4f-584c-49ab-9c58-c62e64091760",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'tuple' object does not support item assignment",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[140], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m tup[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m\n",
      "\u001b[1;31mTypeError\u001b[0m: 'tuple' object does not support item assignment"
     ]
    }
   ],
   "source": [
    "tup[0]=10"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6823a1a-f697-4f01-a112-ab0bfb8865b8",
   "metadata": {},
   "source": [
    "as we are unable to change any value or parameter in tuple so iteration very faster in tuple compare to list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42e90021-7ec4-48ad-a19b-3717797258ea",
   "metadata": {},
   "source": [
    " # SET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "ea7395c0-5328-42be-b638-c5c3fd688b41",
   "metadata": {},
   "outputs": [],
   "source": [
    "# SET SET SET\n",
    "s ={}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "f145482d-3bd0-4674-b445-20396580fa1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "s1 ={21,6,34,58,5}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "5d6881cd-51bd-4914-8c23-350b0b5d42a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{5, 6, 21, 34, 58}"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "757541d9-aeb7-4da7-9ad4-04448d4f012c",
   "metadata": {},
   "outputs": [],
   "source": [
    "s3 ={50,35,53, 'nit',53}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "c96ecf1a-f616-4441-aea6-0a3f6b6c0c32",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{35, 50, 53, 'nit'}"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "b1fbe131-6c93-40e9-a7e0-968d2632938b",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'set' object is not subscriptable",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[146], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m s1[\u001b[38;5;241m1\u001b[39m]\n",
      "\u001b[1;31mTypeError\u001b[0m: 'set' object is not subscriptable"
     ]
    }
   ],
   "source": [
    "s1[1] # as we dont have proper sequencing thats why indexing not subscriptable"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8716bf2e-df4a-4b61-acfe-1b886cef7bf8",
   "metadata": {},
   "source": [
    "# DICTIONARY"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "1f7e68f1-1600-45a3-8500-de77a28e2cd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 'apple ', 2: 'banana', 4: 'orange'}"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# DICTIONARY DICTIONARY DICTIONARY\n",
    "data ={ 1:'apple ' , 2:'banana', 4:'orange'}\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "c3218968-b0de-4003-9673-577f9b10c763",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'orange'"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "60e7c5fc-5ae0-4e53-93d2-0adf86b4d51a",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "3",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[149], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m data[\u001b[38;5;241m3\u001b[39m]\n",
      "\u001b[1;31mKeyError\u001b[0m: 3"
     ]
    }
   ],
   "source": [
    "data[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "aa643505-670c-4ea4-9c15-0ad3bc93bb49",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'banana'"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.get(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "0fe8a88e-b792-41b4-98f7-86899fcf3937",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.get(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "dac5498c-e4d4-469a-98a3-a190020f6dc4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "print(data.get(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "5d6df4c5-d945-443f-9ddf-567b4e498681",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'apple '"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.get(1,'Not Fount')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "c7398035-19e2-4e5f-a5ff-59f8b0dfa97c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Not Found'"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data. get (3,'Not Found')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "0c300487-3a1b-4c70-ba26-a2c8b3afe162",
   "metadata": {},
   "outputs": [],
   "source": [
    "data[5]='five'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "d7b66260-c49b-4d14-a69a-b84b517371b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 'apple ', 2: 'banana', 4: 'orange', 5: 'five'}"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "bf35f901-662b-4a67-8699-116a2240339f",
   "metadata": {},
   "outputs": [],
   "source": [
    "del data [5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "9d8bcae1-0a33-412c-8066-11ab6a2f9d20",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 'apple ', 2: 'banana', 4: 'orange'}"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "e37c0c1a-3e73-4a4c-91a6-96f7f7819797",
   "metadata": {},
   "outputs": [],
   "source": [
    "# list in the dictionary\n",
    "prog ={ 'python':['vscode','pycharm'],'machine learning':'sklearn','datascience':['jupyter','spyder']}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "dfd5bbe9-eaeb-42bd-bfc1-0f049c975835",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'python': ['vscode', 'pycharm'],\n",
       " 'machine learning': 'sklearn',\n",
       " 'datascience': ['jupyter', 'spyder']}"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "66321cab-8d5b-404d-a62b-73468895714d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['vscode', 'pycharm']"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prog['python']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "f0bfacf9-a77c-4027-9067-e6d86485eda9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'sklearn'"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prog['machine learning']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "8cc37143-bca9-454b-850e-666ad118be33",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['jupyter', 'spyder']"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prog['datascience']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe84a45f-0878-43d9-87d7-44cabc7fbcb3",
   "metadata": {},
   "source": [
    "# How to create environment variable"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99f7ff0c-79db-442a-a530-e318cea81771",
   "metadata": {},
   "source": [
    "- STEPS TO SET UP EXECUTE PYTHON IN SYSTEM CMD (TO CREATE ENVIRONMENT VARIABLE)\n",
    "- Open cmd # python (You will get error when you execute 1st time)\n",
    "- search with environment variable - system variable:(C:\\Users\\kdata\\AppData\\Local\\Microsoft\\WindowsApps)\n",
    "- restart the cmd & type python in cmd it will work now\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd5f25bd-052d-4645-9fae-2ffb67c4eff8",
   "metadata": {},
   "source": [
    "# to find help"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70462422-de29-4eff-91f1-40e644355d20",
   "metadata": {},
   "source": [
    "#  introduce to ID()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "79c62555-366d-42a6-ad08-63d619b9fa0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "140736765442616"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# variable address\n",
    "num =5\n",
    "id(num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "eec9ac8c-c672-46b6-b244-60938324a1b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2352956264816"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "name='nit'\n",
    "id(name)#address will be different for both"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1d4f1023-232e-44f6-816b-78f48ae7eb15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "140736765442776"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=10\n",
    "id(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b6194784-209c-47b1-a19f-eb1fbccd0cf3",
   "metadata": {},
   "outputs": [],
   "source": [
    "b =a #thats why python is more memory efficient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f963ccf2-efb4-4fad-8595-cba981485a3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "140736765442776"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "id(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fa525356-dda7-4420-a2a2-6ca704372348",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "140736765442776"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "id(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c4bba575-376f-4b00-a775-d7488004e756",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "140736765442776"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "k=10\n",
    "id(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4c4c81d7-3213-47cd-a3ec-1c1b247d8904",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "140736765443096"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a =20 # as we change the value of a then address will change\n",
    "id(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "602eba5b-3748-4922-85dd-b912fb0d3a1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "140736765442776"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "id(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4adce0d0-a234-4b45-abd4-59f0e7b88e71",
   "metadata": {},
   "source": [
    "what ever the variale we assigned the memory and we not assigned anywhere then we can use as garbage collection.|| \n",
    "VARIABLE - we can change the values || CONSTANT - we cannot change the value\n",
    "-can we make VARIABLE as a CONSTANT (note - in python you cannot make variable as constant)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4e78cc54-f1e1-46e4-847f-4d552e1c77f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.14"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PI =3.14 # in math this is alway constant but python we can chamnge\n",
    "PI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7140d1fd-abe1-47f1-9ff7-208577440560",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.18"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PI =3.18\n",
    "PI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "22765317-714f-4255-a50a-88618807d822",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(PI)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1dba43b-b75c-4bb3-b94b-ae4f4a3f7d1d",
   "metadata": {},
   "source": [
    "# DATA TYPES& DATA STRUCTURES -->"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39659191-70d9-4e74-aef1-e65c96717991",
   "metadata": {},
   "source": [
    "1 -NUMERIC  || 2-LIST|| 3-TUPLE||4-SET||5-STRING||6-RANGE||7-DICTIONARY"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0a58d073-8ded-4170-96f5-24e1768b276a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w =2.5\n",
    "type(w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cfc346a1-43a8-456e-83d0-5c7dfa5c8bce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c0ab6132-187d-416c-9266-8ad04568c2e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ad9797dd-0ccc-4283-bc0a-f8fae4e27b11",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "complex"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w2 =2+3j #so hear j is represent as root of -1\n",
    "type(w2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "66fc4912-2964-4fcf-b3c5-5915fdb1131a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#convert float to integer\n",
    "a=5.6\n",
    "b =int(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "df530851-3ed6-43cd-9535-a31dddb12739",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "12e2826d-16e2-4ade-b2cf-7d52a9aaad37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "685a104a-c673-4873-8a40-e6c6344b8ca4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d2729ae1-3c96-4ebe-8408-f567985458e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "k =float(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "01e855db-7368-4f7d-87f0-9d88df140952",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.0"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b5bfa9cb-116d-4bd1-85ad-cf8d86a94e0c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.6\n",
      "5\n",
      "5.0\n"
     ]
    }
   ],
   "source": [
    "print(a)\n",
    "print(b)\n",
    "print(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "da02cfa3-2ab4-45dd-8f22-cf6e9797935e",
   "metadata": {},
   "outputs": [],
   "source": [
    "k1 =complex(b,k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d27517e1-4d84-40f7-b599-c2855b7fce56",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5+5j)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "complex"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(k1)\n",
    "type(k1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f3d862f8-078f-4763-a4b1-9b7b609efb36",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b<k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "69e7e225-116d-4ace-b7bf-82a57bf7a78b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "condition =b<k\n",
    "condition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4f64a39a-986b-4dd5-84b0-5a4c06f7dc09",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bool"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(condition)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "d34bd14f-3984-40ee-a49d-0ce1dfad8cf2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "int(True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a186fb8b-9294-4ecb-b04d-ca9c3a832d70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "int(False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "17f68ab2-3768-417a-a6bb-654564f04ec3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l =[1,2,3,4]\n",
    "print(l)\n",
    "type(l)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d1cb914b-6364-460f-b2a6-4b654d8b9845",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 3, 4}"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s ={1,2,3,4}\n",
    "s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "2255cc9f-c559-478a-b5e1-9204038474a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "set"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "d82da78b-27ef-4dd7-99ff-9eccbff8447c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1, 2, 3, 4, 11}"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1 ={1,2,3,4,4,3,11}\n",
    "s1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "dcaedc64-dddf-4e59-a107-3025c8ac9ea0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 20, 30)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t =(10,20,30)\n",
    "t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "a5a38602-434c-459f-bfcc-ea3054029cee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tuple"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "dd63e1fa-2b21-42ae-b887-d37fd610d91d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "str ='nit' #we dont have charcter in python\n",
    "type(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "95fd0cb7-489c-4cb4-902c-88c5cd4aaed8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st ='n'\n",
    "type(st)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b752abc3-d5a0-4016-a24b-deb036bf0623",
   "metadata": {},
   "source": [
    "# range()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "cd85d592-8646-4abc-abd8-a5fe4dfee40e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "range(0, 10)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r =range (0,10)\n",
    "r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "196c1397-50fe-4134-9f69-01933157e110",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "range"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "3b3e9264-8d2d-4cd9-9584-486dd313f4bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# if you want to print the range\n",
    "list (range(0,10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "49b62b69-37f0-46cc-b4ec-a330241d58a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r1 =list(r)\n",
    "r1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "51421262-cd67-49ec-a10b-c948408c85c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2, 4, 6, 8]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# if you want to print even number\n",
    "even_number =list(range(2,10,2))\n",
    "even_number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "4eb34c8d-7866-44bf-ac75-5e2fddcd22c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 'one', 2: 'two', 3: 'three'}"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d={ 1:'one',2: 'two', 3:'three'}\n",
    "d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "e21697dd-5686-4fbb-9e68-1a05351d2fd6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "f7edd751-3e6b-4ed2-8488-1d69f773df92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys([1, 2, 3])"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# print the keys\n",
    "d.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "48c93e90-c78b-4495-a388-61e626ff45af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_values(['one', 'two', 'three'])"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d.values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "8516921f-1d10-4d69-9ce3-1e5fb2ba65e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'two'"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# how to get particular value\n",
    "d[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "0649d51a-b4d1-42ee-b38d-b1bb3bbac8b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'two'"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# other way to get value as\n",
    "d.get(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57d01b4f-af03-41a9-9fc4-67b26e6341f6",
   "metadata": {},
   "source": [
    "# operator's in python"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a259ea3-214e-4466-8218-1b7238347d5e",
   "metadata": {},
   "source": [
    "1- ARITHMETIC OPERATOR ( + , -, *, /, %, %%, **, ^\n",
    "2- ASSIGNMEN OPERATOR (=)\n",
    "3- RELATIONAL OPERATOR\n",
    "4- LOGICAL OPERATOR\n",
    "5- UNARY OPERATOR"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe6d5b3d-a99d-4cd2-b022-0769a3f4e624",
   "metadata": {},
   "source": [
    "# Arithmetic operator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "7f970466-d1e5-4e5b-8969-aba89820ec1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "x1 , y1=10,5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "ce32b0a2-4e40-49cd-b8fe-3ec0db418717",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1+y1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "4ad11104-3773-4e1a-a4c8-078473057144",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1-y1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "bb9ed566-ef8b-4302-ac30-e7e0a0ba0802",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1*y1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "fbbad86b-9e12-4da4-aa29-1a052b1be30f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1/y1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "abae945a-b278-4f72-a63a-aa8e028a23f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1//y1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "599f4210-330e-40ef-a679-1df423ec94be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1%y1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "3ec9baa0-5b29-4478-9165-cfe865d66b56",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100000"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1 ** y1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "9adb42ac-d551-4686-bf23-479b7b8fcbbf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2**3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b08404b1-f704-434b-b91c-3bc266a90198",
   "metadata": {},
   "source": [
    "# Assignment operator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "4ff14d16-8b69-4691-980e-f9de3a9e8595",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "072904a9-4e10-4df2-8b48-2f4ca03173e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "x =x+2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "5f6e64b5-963e-414e-84b5-a9cde57c33ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "660d168d-60e2-49a7-b256-df475319acb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "x+=2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "9f51bd92-63e8-404d-9e6f-289071782088",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "357b6aa0-8277-4d16-9c8d-0ae7361203ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "x+=2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "10952e86-070a-4e84-ab0d-9c5dca72559b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "d0f2dd51-3f19-4e9e-8861-17de523030f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "x*=2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "b9bdb5db-098c-42c7-91fd-023ad6dc2832",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "315fe3c9-5936-4980-8e7f-63ecb7451b62",
   "metadata": {},
   "outputs": [],
   "source": [
    "x -=2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "c2d0cd83-aefb-4c27-bc16-789b680bcf27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "8ce75c91-0d95-4a67-9807-7e254157435d",
   "metadata": {},
   "outputs": [],
   "source": [
    "x /=2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "1b8980ee-5ff3-4b24-9d64-37fda73f823a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.5"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "1be1dea4-09a7-4228-8b37-108b327e13f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "a ,b =5,6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "6b3c379e-eb01-4828-a2a4-133b21696057",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "11ecdee9-13e7-4df5-9690-09860c4a39e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90518ef8-a256-4fb7-8884-93e86d318748",
   "metadata": {},
   "source": [
    "# unary operator"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ed5f540-e1c6-4687-8fc7-2b58ffce4325",
   "metadata": {},
   "source": [
    "Here we are applying unary minus operator (-)on the operand n; the value of m becomes -7, which indicates it as a negative value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "45f1636f-540b-4914-9c14-44268e0295dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "n = 7# negattion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "c8238799-41ba-441d-824f-07aa27c16fab",
   "metadata": {},
   "outputs": [],
   "source": [
    "m =-(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "cad12f88-4f10-4513-81a0-85791f9667a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-7"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "d3eeabfe-2d08-4a60-869d-dc5c6f172ae3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "7a7be4ee-ce6a-4c1c-8b18-5420dbceb41e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-7"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "-n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "518e9472-4dd2-4bcb-ba50-2d8cbd2bfd2d",
   "metadata": {},
   "source": [
    "# Relational operator"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad475a83-5dfe-48be-82ca-0d48bc33a659",
   "metadata": {},
   "source": [
    "we are using this operator for comparing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "13c94ac6-4918-4e56-b87f-c0803bffd42e",
   "metadata": {},
   "outputs": [],
   "source": [
    "a =5\n",
    "b =7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "012e7267-fb1b-47bb-9cc5-e0774293c4fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a == b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "a107ee89-e3f7-416a-84e9-416056506360",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a<b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "65f68cad-8739-4656-943f-89aaf03748f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a>b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "f5441d78-9971-4771-ac79-cb4bb077df35",
   "metadata": {},
   "outputs": [],
   "source": [
    "# a=b # we cannot use =operatro that means it is assigning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "7df9326e-dd75-46ca-99fe-7621ba43ef7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a == b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "31b5aa91-03dc-4582-b42a-9eed7fab4a81",
   "metadata": {},
   "outputs": [],
   "source": [
    "a =10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "a63095d7-acdc-4fac-8d60-9cde6e011f94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a != b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "ba7a7df5-d44f-4413-b1a6-5b1f3c75b5c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# hear if i change b =6\n",
    "b =10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "b0176b67-749e-43f9-b8a0-c7f79cea48a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a == b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "efe3099c-cca5-425e-9999-dc6a84beb012",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a >=b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51f619ee-1443-4750-abc4-6ae110893c4b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "76f27bfb-24c5-467e-a698-188c42ac068a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a <=b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "39022ae6-fa0e-4506-b909-10496b476259",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a<b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "5f74917c-0273-4bad-b290-f30c283c544a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a>b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "b4198daa-896f-45aa-a7f1-6c1ed34884ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "b =7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "c5f7ef07-9e87-4d15-8291-5f2f8292766d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a !=b"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7dfc71c8-f1df-4ad3-b53c-6889309e088b",
   "metadata": {},
   "source": [
    "# LOGICAL OPERATOR"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74a6d5ed-d8a5-45e7-b892-68ba6e390e45",
   "metadata": {},
   "source": [
    "#  AND , OR, NOT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "e385ef75-04bd-4556-8c96-c63d56653b15",
   "metadata": {},
   "outputs": [],
   "source": [
    "a =5\n",
    "b=4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "2c1088e1-bb64-494a-97f0-b3c99e0cd523",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a<8 and b<5 #refer to the truth table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "56932c99-e009-4cb6-867d-f7b9d8f664e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a<8 and b<2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "6df41b2d-4c40-49d3-8c5a-3cd987f93874",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a < 8 or b<2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "f18914c3-39ac-4fbb-b3a7-7a042e0d5300",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a > 8 or b < 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "6496be53-a633-4f89-a077-e811c2499df0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = False \n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "1d91620f-0b96-4ad9-b867-7a46d412ba0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "not x # you can reverse the operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "b6d6f2fc-b4a0-4970-81dc-8feb8be11d11",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = not x\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "50b7c5d1-8a25-4348-b012-ae4a3fed7fb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "8cfa43f2-8db1-4856-a07c-9c0f0e08b2e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "not x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd671285-a55a-4df3-bde6-9fd9948a88fa",
   "metadata": {},
   "source": [
    "# Number system converstion (bit -binary digit)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b656c89-5d44-44e5-9cd7-d8b7d4e9e159",
   "metadata": {},
   "source": [
    "binary : base (0-1) --> please divide 15/2 & count in reverse order \n",
    "octal : base (0-7)\n",
    "hexadecimal : base (0-9 & then a-f)\n",
    "when you check ipaddress you will these format --> cmd - ipconfig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "ec96f155-cb2b-4d42-b4b1-1fbf031a3d99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "da63baea-2805-4c1d-b5fc-cbfc3d3f07eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0b11001'"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bin(25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "cf1f4329-5fe9-429d-b41e-9361deb12862",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "35"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "int (0b100011)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "27d569a4-bd31-4120-a021-13f31234ce22",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0b10100'"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bin(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "e1d1bad8-45f9-4129-b647-7a0b3bd6d4fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "int(0b10100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "5d2a3cc1-b4e8-4835-a020-f2624ecc13ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "0b1111"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "3a7b47ae-fcd5-4ec5-b5e8-1dcb2412abc3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0o17'"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oct(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "5ac4fa7e-e1fc-435b-a04a-7e48066d3c77",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "0o17"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "259275ea-ee04-4ba8-916a-4656bdedb68e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0x9'"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hex(9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "484ff493-b9e1-45c5-ba42-0ab7a6b73176",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "0xf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "0f94bec6-fd80-4116-a8d6-92f948749352",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0xa'"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hex(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "423d9bfe-ffda-45ee-b2e9-08a9b3491085",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "0xa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "74da5895-1238-43bf-9374-953aa96545fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0x19'"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hex(25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "b1d46d03-39f3-4355-94ad-1a5d928e7e0f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "0x19"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "e63d20cb-0b37-44a6-a93b-33079fb8effb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "0x15"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f268810-7227-45a1-8b39-de884a778d94",
   "metadata": {},
   "source": [
    "# Swap variable in python"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ed22c67-1b27-48ff-8ad2-00411e324597",
   "metadata": {},
   "source": [
    "(a,b =5,6) After swap we should get ==> (a,b=6,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "097ad965-1b71-4602-b6db-9f4408942dc5",
   "metadata": {},
   "outputs": [],
   "source": [
    "a =5\n",
    "b=6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "f86c74a2-2342-4018-8d4c-f29a19353bc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "a =b\n",
    "b=a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "39ea6d34-e7e1-410d-916d-39ad86f9113c",
   "metadata": {},
   "outputs": [],
   "source": [
    " a,b = b, a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "91ca8623-c7e6-40a8-89c5-127d3c5da672",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "print(a)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "445cee01-7a39-4836-9c67-2b65155ea751",
   "metadata": {},
   "outputs": [],
   "source": [
    "# in above scenario we lost the value 5\n",
    "a1 =7\n",
    "b1 = 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "6594cb22-e9f0-4e92-9ed1-db3322b3babb",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp = a1\n",
    "a1 =b1\n",
    "b1 =temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "d2ae91a9-e264-4300-bec0-e925ff38c75f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n",
      "7\n"
     ]
    }
   ],
   "source": [
    "print(a1)\n",
    "print(b1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "a3ef4b1e-7c07-47bf-a834-9f491626ea68",
   "metadata": {},
   "outputs": [],
   "source": [
    "a2 = 5\n",
    "b2 = 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "6f6afac7-9387-44ec-882a-bfb8bab2b7b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# swap variable formulas\n",
    "a2 = a2 + b2\n",
    "b2 = a2 - b2\n",
    "a2 =a2  -b2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "03b911a6-9c45-4af2-8817-d227afe01335",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "print(a2)\n",
    "print(b2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "c9eefc2f-e3e6-4369-af37-a9dfffdff560",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "print(0b101) # 101 is 3 bit\n",
    "print(0b110) # 110 also 3bit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "67f654e5-694d-4b25-9d39-718d78521f83",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0b1011\n",
      "11\n"
     ]
    }
   ],
   "source": [
    "#but when we use a2 + b2 then we get 11 that means we will get 4 bit which is 1 bit extra \n",
    "print(bin(11))\n",
    "print(0b1011)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "935280e6-d47f-4b51-bc0a-49d3ba8b7fbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#there is other way to work using swap variable also which is XOR because it will not waste extra bit \n",
    "a2 = a2 ^ b2\n",
    "b2 = a2 ^ b2\n",
    "a2 = a2 ^ b2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "2cab8ff7-884f-457d-998d-3d74ec5e60ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "print(a2)\n",
    "print(b2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "87dd75ab-36e8-44c3-a902-e1174458677a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "print(a2)\n",
    "print(b2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "02196f13-a9b1-4912-9bfd-b268bba5f07f",
   "metadata": {},
   "outputs": [],
   "source": [
    " a2 ,b2 = b2 ,a2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "7ca0f5aa-e9dc-4b6f-9dd0-456fadd0d8da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "print(a2)\n",
    "print(b2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75b044b6-17ac-444a-ac64-e12af305113d",
   "metadata": {},
   "source": [
    "#  BITWISE OPERATOR"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a34c1e78-6b8e-4356-81bb-11c0ec7b4223",
   "metadata": {},
   "source": [
    "- WE HAVE 6 OPERATORS \n",
    "COMPLEMENT ( ~ ) || AND ( & )  || OR ( | ) || XOR ( ^ ) || LEFT SHIFT ( << ) || RIGHT SHIFT ( >> )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "ac62cd9a-f4c4-4cfb-89ed-9a902276811e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0b1100\n",
      "0b1101\n"
     ]
    }
   ],
   "source": [
    "print(bin(12))\n",
    "print(bin(13))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77b9622c-a355-4139-9159-1213da831f59",
   "metadata": {},
   "source": [
    "# complement --> you will get this key below esc character"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54a30fac-fe07-4737-8aee-6fc555caf408",
   "metadata": {},
   "source": [
    "12 ==> 1100 || \n",
    "first thing we need to understand what is mean by complement. \n",
    "complement means it will do reverse of the binary format i.e. - ~0 it will give you 1 ~1 it will give 0\n",
    "12 binary format is 00001100 ( complement of ~00001100 reverse the number - 11110011 which is (-13)\n",
    "\n",
    " but the question is why we got -13 \n",
    " to understand this concept ( we have concept of 2's complement\n",
    " 2's complement mean (1's complement + 1)\n",
    " in the system we can store +Ve number but how to store -ve number\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "cceadfe8-c0fd-45d3-bea6-7b7880c4a208",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-13"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# COMPLEMENT (~) (TILDE OR TILD)\n",
    "~12 # why we get -13. first we understand what is complment means (reversr of binary format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "d0f9ff5e-1255-4c38-b2ae-6223040a1b37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-46"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "~45"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "47252be7-d544-47da-8d21-61e99f5da646",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-7"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "~6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "fce791bc-7988-4225-8b47-a86e29d40bab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "~-6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "2d04e886-16da-47ea-ba1e-c6c79d825c62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "~-1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7171e266-c63f-44de-a235-237c282981b8",
   "metadata": {},
   "source": [
    " # bit wise and opertor"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b3f38e7-84fe-4730-8951-b498e59d9ea5",
   "metadata": {},
   "source": [
    "AND - LOGICAL OPERATOR ||| & - BITWISE AND OPERATOR  \n",
    "(we know that 1 & 1 is 1)\n",
    "12 - 00001100 \n",
    "13 - 00001101\n",
    "when we are add both then then outut we will get as 12 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "a49d18bb-36fe-4b86-9b3c-d809955060dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "12& 13"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "fdee7934-0c98-4afe-8f32-2b272985abfe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1&1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "cd6045f3-3d42-44b5-846f-b7c63f43c1fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1 | 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "a85430e3-e869-4ed4-be14-6e4b06c1a495",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1&0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "23f6e1d8-8344-4bd3-b632-88ebb45276e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "12 |13"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "b70347aa-c777-4104-a513-c6abe27615c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "35 & 40 # please do the homework conververt 35, 40 to binary format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "e3da7309-11a9-4e08-ab34-73c0ca01aa5b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "43"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "35 | 40"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "b763d29f-3598-40c7-a270-d3037b82f9d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# in XOR if the both number are different then we will get 1 or else we will get 0\n",
    "12^13"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "8fe92ccd-49ab-47a4-a699-b79be30f186e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25630"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "25630"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "bbdefd1c-eea1-4852-bc8d-3acc4a57fe16",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0b11001'"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bin(25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "332f8a7a-5353-4f0c-a42c-65551acb1017",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0b11110'"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bin(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "eae8a69e-f439-429c-b3a8-9c9a96a0b65a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "int(0b000111)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "968fc791-f4e4-4442-bb49-f031d1386d89",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "40"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# BIT WISE LEFT OPERATOR\n",
    "#bit wise left operator bydefault you will take 2 zeros ( )\n",
    "#10 binary operator is 1010 | also i can say 1010\n",
    "10<<2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "748b4456-3e45-4b8b-b5cc-214ef7cf3ac5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "320"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "20<<4 #can we do this"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "43e21351-db25-4efc-b49d-1b8f149cb85a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "10>>2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "5b83d80c-f168-49d5-9893-14e77b613878",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0b10100'"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bin(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "f0d54f0b-5a01-4e5a-ae55-617bb4276894",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "20>>4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cf76333-bdd7-4719-b397-69281f07eb77",
   "metadata": {},
   "source": [
    "# import math module"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69e67d1a-8aae-4254-9c7a-6f3eb2523503",
   "metadata": {},
   "source": [
    "### import math module \n",
    "https://docs.python.org/3/library/math.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "fb084cf1-f438-43f8-8fa0-e0ee8a0bc0c6",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'sqrt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[173], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m x \u001b[38;5;241m=\u001b[39m sqrt(\u001b[38;5;241m25\u001b[39m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'sqrt' is not defined"
     ]
    }
   ],
   "source": [
    "x = sqrt(25) # sqrt is inbuild function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "d3cbb4f4-62e6-4a2a-9110-b02124479072",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math # math is module"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "798660b7-f4e2-405b-9add-4055d5b29a67",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.0"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = math.sqrt(25)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "279c3e73-3982-423b-8623-8421a81b677a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.872983346207417"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1 = math .sqrt(15)\n",
    "x1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "ef125372-b7ed-4a7f-aab4-b78c68693703",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "print(math.floor(2.9)) #floor- minimum or least value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "32d6e8e4-4910-44fe-8e2b-245652afb403",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "print (math.ceil(2.9))  #ceil -maximum or highest value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "1d19dcbb-30b0-4be6-9375-a917cc1a28d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.0\n"
     ]
    }
   ],
   "source": [
    "print(math.pow(3,2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "2cc648e7-5a7d-4662-bff9-f5d57afbd579",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.141592653589793\n"
     ]
    }
   ],
   "source": [
    "print(math.pi) #these are constant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "788e2e84-fe17-46a6-a18f-cd35f643ed3a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.718281828459045\n"
     ]
    }
   ],
   "source": [
    "print(math.e)#these sre constant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "e4db6d6f-78fb-4b3d-b46b-0703c6bfc8fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.1622776601683795"
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import math as m\n",
    "m.sqrt(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "0f3ba853-8ff7-4077-b205-e7831c9c3199",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8.0"
      ]
     },
     "execution_count": 184,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from math import sqrt, pow # math has many function if you want to call specific function then you use from\n",
    "pow(2,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "42118f0b-a378-4e5e-a303-bb28298bc988",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "round(pow(2,3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "793e2dc1-6a59-47c3-9008-0d9d7bf1cf0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#help(math))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85df0c9d-ce77-4a90-a942-270b60da0c00",
   "metadata": {},
   "source": [
    "# pycharm run debug\n",
    "# how to install python idle\n",
    "# how to install pycharm & starts working on pycharm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "359aa9e2-ad17-451a-bf35-ab3abdb39cb2",
   "metadata": {},
   "source": [
    "# user input function in python || command line input"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "6f4c8488-535e-49ea-b0c4-6de4f96101c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 5\n",
      " 6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56\n"
     ]
    }
   ],
   "source": [
    "x = input ()\n",
    "y = input()\n",
    "z = x+y\n",
    "print(z) # console is waiting for user to enter input \n",
    "# also if you work in idle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "faac85a1-1499-4d32-95e9-42f5fe8f3c29",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the 1st number 5\n",
      "Enter the 2nd number 6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56\n"
     ]
    }
   ],
   "source": [
    "x1 = input('Enter the 1st number') #whenevery you works in input function it always give you string \n",
    "y1 = input('Enter the 2nd number') # it wont understand as arithmetic operator\n",
    "z1 = x1 + y1\n",
    "print(z1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "e2b63b91-da8a-42c8-b364-02122bdd9216",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(x1)\n",
    "type(y1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "808360e6-30cb-43d8-bb8e-687d365a800b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the 1st number 5\n",
      "Enter the 2nd number 6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n"
     ]
    }
   ],
   "source": [
    "x1 = input('Enter the 1st number') #whenevery you works in input function it always give you string \n",
    "a1 = int(x1)\n",
    "y1 = input('Enter the 2nd number') # it wont understand as arithmetic operator\n",
    "b1 = int(y1)\n",
    "z1 = a1 + b1\n",
    "print(z1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "871a3fbd-5b0f-4010-b186-f7068a42d040",
   "metadata": {},
   "source": [
    "for the above code notice we are using many lines because fo that wasting some memory spaces as well\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "4f6533ce-e643-4d8d-b86a-12236ae96580",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the 1st number 2\n",
      "Enter the 2nd number 3\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x2 = int(input('Enter the 1st number'))\n",
    "y2 = int(input('Enter the 2nd number'))\n",
    "z2 = x2 + y2\n",
    "z2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52b637bf-2b5a-42cc-85d4-0c6b8ba5efb2",
   "metadata": {},
   "source": [
    "lets take input from the user in char format, but we dont have char format in python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "e1c88d0f-afcb-435c-b346-c9769c404fa2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter a char hello\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello\n"
     ]
    }
   ],
   "source": [
    "ch =input('enter a char')\n",
    "print(ch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "7e659abc-a058-4c47-b055-cd7a323eb0bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "e\n"
     ]
    }
   ],
   "source": [
    "print(ch[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "aa648ab6-c53e-405d-b9f6-b2a1ed6732cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "o\n"
     ]
    }
   ],
   "source": [
    "print(ch[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "df2295f7-1607-4527-a904-96ca4337c6f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter a char hello\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "h\n"
     ]
    }
   ],
   "source": [
    "ch = input ('enter a char')[0]\n",
    "print(ch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "652d4fcb-8fbe-48ae-846c-a58136a32c56",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter a char hello\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "el\n"
     ]
    }
   ],
   "source": [
    "ch = input('enter a char')[1:3]\n",
    "print(ch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "ab9d575a-22c1-46e7-b87a-8dfa9d796498",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter a char 2+3-4+10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2+3-4+10\n"
     ]
    }
   ],
   "source": [
    "ch = input('enter a char')\n",
    "print(ch) # if you enter as 2 + 6 -1 we get output as 2 + 6-1 only "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "feadfee9-4566-494b-aa8b-bb4111af8396",
   "metadata": {},
   "source": [
    "#  EVAL function using input"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "id": "28e8afb3-2c11-4345-9a7c-2b37d2dd5bbe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter an expr 2+3-4+10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n"
     ]
    }
   ],
   "source": [
    "result = eval(input('enter an expr'))\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d5e9331-cbd8-40d8-ac32-e8cead071249",
   "metadata": {},
   "source": [
    "if you want to pass the value in cmd can we pass the value like this\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b1801e5-2e7e-4ab0-b9aa-ebe812a3a910",
   "metadata": {},
   "source": [
    "when we run the above code in cmd then we get the value to 11 only but how to add them then we need to use very important concept called (argv) -- (argument values) what it does if you pass 1 value then 1 value it will display but if you pass 2 value then it will display 2 values\n",
    "\n",
    "argv -- it will understand based on index number & bydefault index number 0 means that is file name\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e1108a5-cec2-425c-bbec-ff06b818274c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
